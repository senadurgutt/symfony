{% extends 'base.html.twig' %}

{% block title %}{{ product.title }}{% endblock %}

{% block mainContent %}
    <style>
        .product-card {
            display: flex;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 15px;
            background-color: #f9f2f4;
            flex-direction: row;
            justify-content: center; /* Yatayda ortalamak için */
            align-items: center;     /* Dikeyde ortalamak için */
            place-items: center;
        }

        .product-image {
            flex: 0 0 50%; /* Görsel kısmını %50 genişlikte tutar */
            max-width: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px;
            position: relative;
            transition: transform 0.3s ease; /* Büyütme efekti için geçiş süresi */
        }

        .product-image img {
            width: 100%;
            height: auto;
            object-fit: cover;
            transition: transform 0.3s ease; /* Görsel büyütme geçiş efekti */
        }

        .product-image:hover img {
            transform: scale(1.1); /* Resmi %10 büyütür */
        }


        .product-details {
            flex: 1;
            padding: 20px;
        }

        .product-title {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .product-description {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }

        /* Modal Container */
        .modal {
            display: none; /* Varsayılan olarak gizli */
            position: fixed; /* Ekranın üst kısmında */
            z-index: 1000; /* Diğer içeriklerin üzerinde kalması için */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* İçerik taşmasını önler */
            background-color: rgba(0,0,0,0.8); /* Koyu bir arka plan */
        }

        /* Modal İçerik */
        .modal-content {
            margin: auto;
            display: block;
            width: 80%; /* Görselin genişliği */
            max-width: 700px; /* Maksimum genişlik */
        }

        /* Kapatma Düğmesi */
        .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #fff;
            font-size: 40px;
            font-weight: bold;
            cursor: pointer;
        }

        /* Kapatma Düğmesinin üzerine gelince */
        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }



        .comments {
            max-height: 200px;
            overflow-y: auto; /* Yorumların kaydırılmasını sağlar */
            margin-bottom: 15px;
            border: 1px solid #ddd;
            padding: 2px;
            border-radius: 5px;
            background-color: #E0E0E0;
        }

        .comment {
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            display: flex;
            align-items: flex-start;
            background-color: #f9f9f9;
        }

        .comment:last-child {
            border-bottom: none;
        }

        .comment-header {
            flex: 0 0 auto;
            font-weight: bold;
            margin-right: 10px;
        }

        .comment-body {
            flex: 1;
        }

        .btn-primary {
            margin-top: 10px;
        }

        .back-button {
            margin-bottom: 40px;
        }

        .back-button a {
            display: inline-block;
            padding: 10px 20px;
            font-size: 1rem;
            color: #000000;
            background-color: #E0E0E0;
            text-decoration: none;
            border-radius: 5px;
        }

        .back-button a:hover {
            background-color: #000000;
            color: #E0E0E0;

        }

        .container.mt-4 {
            margin: 10px 20px;
        }

        /* Hover efekti */
        .product_box:hover .image_1 {
            transform: scale(1.2); /* Resmi %20 büyütme */
            z-index: 10; /* Üzerinde diğer öğelerin üstünde kalması için */
        }

        /* Büyütülmüş resim için kutu stili */
        .product_box:hover .image_1::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5); /* Koyu bir arka plan */
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-size: 1.5rem;
            text-align: center;
            padding: 10px;
        }

        .star {
            font-size: 2rem;
            color: #ccc;
            cursor: pointer;
        }

        .star:hover, .star.active {
            color: #ffc100;
        }

    </style>
    <div class="container mt-4">
        <div class="back-button">
            <a href="{{ path('categories', { id: category.id }) }}">Geri Dön</a>
        </div>
        <div class="product-card">
            <div class="product-image">
                <img src="{{ asset(product.image) }}" class="img-fluid" alt="{{ product.title }}">
            </div>
            <div class="product-details">
                <h1 class="product-title">{{ product.title }}</h1>

                <div class="rating" id="ratings-list">
                    <div id="rating" data-product-id="{{ product.id }}" class="d-flex">
                        {% for i in 1..5 %}
                            <span class="star {% if i <= current_rating %}active{% endif %}" data-value="{{ i }}">&#9733;</span>
                        {% endfor %}
                    </div>
                </div>

                <p class="product-description">{{ product.description }}</p>

                <h2>Yorumlar</h2>
                <div class="comments" id="comments-list">
                    {% for comment in comments %}
                        <div class="comment">
                            <div class="comment-header">
                                <strong>{{ comment.member.name }} {{ comment.member.surname }}</strong>
                            </div>
                            <div class="comment-body">
                                {{ comment.comment }}
                            </div>
                        </div>
                    {% else %}
                        <p>Henüz yorum yapılmamış.</p>
                    {% endfor %}
                </div>

                <h3>Yorum Yap</h3>
                {{ form_start(comment_form, { 'attr': { 'id': 'comment-form' } }) }}
                {{ form_widget(comment_form.comment) }}
                {{ form_end(comment_form) }}
            </div>
        </div>
    </div>

    <div id="image-modal" class="modal">
        <span class="close">&times;</span>
        <img class="modal-content" id="modal-img">
        <div id="caption"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const ratingDiv = document.getElementById('rating');

            ratingDiv.addEventListener('click', function(event) {
                const target = event.target;

                if (target.classList.contains('star')) {
                    const ratingValue = target.getAttribute('data-value');
                    const productId = ratingDiv.getAttribute('data-product-id');

                    fetch('{{ path('rating_submit') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: new URLSearchParams({
                            'product_id': productId,
                            'rating': ratingValue
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                ratingDiv.querySelectorAll('.star').forEach(star => star.classList.remove('active'));

                                for (let i = 1; i <= ratingValue; i++) {
                                    ratingDiv.querySelector(`.star[data-value="${i}"]`).classList.add('active');
                                }
                            } else {
                                alert('Error saving rating.');
                            }
                        });
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const commentForm = document.getElementById('comment-form');

            commentForm.addEventListener('submit', function(event) {
                event.preventDefault(); // Formun normal gönderimini engelle

                const formData = new FormData(commentForm);

                fetch('{{ path('product_show', { id: product.id }) }}', { // Burada doğru rota adını kullandığınızdan emin olun
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const commentList = document.getElementById('comments-list');
                            const newComment = document.createElement('div');
                            newComment.classList.add('comment');
                            newComment.innerHTML = `
                    <div class="comment-header">
                        <strong>${data.comment.member.name} ${data.comment.member.surname}</strong>
                    </div>
                    <div class="comment-body">
                        ${data.comment.comment}
                    </div>
                `;
                            commentList.appendChild(newComment);
                            commentForm.reset();
                        } else {
                            alert('Error adding comment.');
                        }
                    });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('image-modal');
            const modalImg = document.getElementById('modal-img');
            const captionText = document.getElementById('caption');
            const images = document.querySelectorAll('.product-image img');
            const closeBtn = document.querySelector('.close');

            images.forEach(img => {
                img.addEventListener('click', function() {
                    modal.style.display = 'block';
                    modalImg.src = this.src;
                    captionText.innerHTML = this.alt;
                });
            });

            closeBtn.addEventListener('click', function() {
                modal.style.display = 'none';
            });

            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });
    </script>


{% endblock %}